name: CMake-Min-Version

# Controls when the workflow will run
on:
  push:
    branches: [ task-21-cmake-min ]
  pull_request:
    branches: [ task-21-cmake-min ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  setupcmake:
    runs-on: ubuntu-latest
    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.9
      with:
        cmake-version: '3.16.x'
    - name: Use cmake
      run: cmake --version
      
  coverage-linux:
    name: libSMCE (coverage) - Linux
    runs-on: ubuntu-latest
    container: ubuntu:hirsute
    env:
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - uses: actions/checkout@v2
      - name: Check deps
        run: |
          apt-get update
          apt-get install -y lcov curl wget git ninja-build g++ libboost-all-dev libmosquitto-dev pkg-config jq perl-base
          ninja --version
          cmake --version
          wget -O Juniper.deb https://www.juniper-lang.org/installers/Juniper-3.0.0.deb
          apt-get install ./Juniper.deb
      - name: Setup global CMake interceptor
        run: ci/setup-cmake-interceptor.sh
      - name: CMake configure
        run: |
          cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DSMCE_COVERAGE=On \
          -DSMCE_BUILD_STATIC=Off \
          -DSMCE_CXXRT_LINKING=SHARED \
          -DSMCE_BOOST_LINKING=SHARED \
          -DSMCE_MOSQUITTO_LINKING=SHARED \
          -DSMCE_TEST_JUNIPER=On \
          -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          (cd build/test/; ctest --output-on-failure)
      - name: Collect C++ coverage information
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' "$(pwd)/test/*" "$(pwd)/build/*" --output-file coverage.info
          lcov --list coverage.info
      - name: Collect CMake coverage information
        run: |
          ci/scan-cmake-commands.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.info,./cmake-codecov-report.json
      - name: Upload traces
        uses: 'actions/upload-artifact@v2'
        with:
          name: cmcov-traces
          path: CMakeTrace/
          
  build-ubuntu:
    name: libSMCE - Ubuntu (${{ matrix.compiler.name }} & Boost ${{ matrix.boost.version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC 10
            c: gcc-10
            cxx: g++-10
          - name: Clang/LLVM 10
            c: clang-10
            cxx: clang++-10
        boost:
          - version: 1.74.0
            release: true
          - version: 1.75.0
            release: false
          - version: 1.76.0
            release: false
          - version: 1.77.0
            release: false
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v2
        with:
          path: boost_root
          key: ${{ runner.os }}-boost-${{ matrix.boost.version }}-pic
      - name: Install Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: ci/build-static-boost.sh ${{ matrix.boost.version }}
      - name: Check deps
        run: |
          sudo apt install ninja-build
          ninja --version # technically not a dependency, but used to speedup builds
          cmake --version
      - name: CMake configure
        run: |
          export BOOST_ROOT="$(pwd)/boost_root"
          mkdir build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=STATIC \
            -DSMCE_BOOST_LINKING=STATIC \
            -DSMCE_OPENSSL_LINKING=STATIC \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          (cd build/test/; ctest --output-on-failure)
      - name: Package
        run: |
          mkdir ./build/packages
          (cd build/; cpack -B packages)
          rm -rd build/packages/_CPack_Packages
      - name: Upload artifacts
        if: matrix.boost.release
        uses: 'actions/upload-artifact@v2'
        with:
          name: libSMCE-ubuntu-${{ matrix.compiler.c }}
          path: build/packages/*
